var N=null,E="",T="t",U="u",searchIndex={};
var R=["interests","registry","duration","result","Events","A collection of readiness events.","token","is_readable","is_writable","is_aio","mio::event","register","reregister","deregister","tcpstream","socketaddr","try_clone","shutdown","tcplistener","local_addr","Creates a new independently owned handle to the underlying…","Sets the value for the `IP_TTL` option on this socket.","Gets the value of the `IP_TTL` option for this socket.","take_error","Get the value of the `SO_ERROR` option on this socket.","option","udpsocket","Receives data from the socket, without removing it from…","set_ttl","ipv4addr","ipv6addr","try_from","try_into","borrow_mut","type_id","to_owned","clone_into","borrow","typeid","mio::unix","mio::net","ordering","partial_cmp","formatter","as_raw_fd","into_raw_fd","from_raw_fd","Interests","Registry","TcpStream","TcpListener","UdpSocket","SourceFd"];

searchIndex["mio"]={"doc":"A fast, low-level IO library for Rust focusing on…","i":[[3,R[4],"mio",R[5],N,N],[3,R[47],E,"Interests used in registering.",N,N],[3,"Poll",E,"Polls for readiness events on all registered values.",N,N],[3,R[48],E,"Registers I/O resources.",N,N],[3,"Token",E,"Associates readiness events with [`event::Source`]s.",N,N],[12,"0",E,E,0,N],[3,"Waker",E,"Waker allows cross-thread waking of [`Poll`].",N,N],[18,"READABLE",E,"Returns a `Interests` set representing readable interests.",1,N],[18,"WRITABLE",E,"Returns a `Interests` set representing writable interests.",1,N],[11,"add",E,"Add together two `Interests`.",1,[[[R[0]]],[R[0]]]],[11,R[7],E,"Returns true if the value includes readable readiness.",1,[[],["bool"]]],[11,R[8],E,"Returns true if the value includes writable readiness.",1,[[],["bool"]]],[11,R[9],E,"Returns true if `Interests` contains AIO readiness",1,[[],["bool"]]],[11,"is_lio",E,"Returns true if `Interests` contains LIO readiness",1,[[],["bool"]]],[11,"new",E,"Return a new `Poll` handle.",2,[[],[[R[3],["poll"]],["poll"]]]],[11,R[1],E,"Create a separate `Registry` which can be used to register…",2,[[["self"]],[R[1]]]],[11,"poll",E,"Wait for readiness events",2,[[["self"],[R[25],[R[2]]],["events"],[R[2]]],[R[3]]]],[11,R[11],E,"Register an [`event::Source`] with the `Poll` instance.",3,[[["self"],[R[0]],["s"],[R[6]]],[R[3]]]],[11,R[12],E,"Re-register an [`event::Source`] with the `Poll` instance.",3,[[["self"],[R[0]],["s"],[R[6]]],[R[3]]]],[11,R[13],E,"Deregister an [`event::Source`] with the `Poll` instance.",3,[[["self"],["s"]],[R[3]]]],[11,R[16],E,"Creates a new independently owned `Registry`.",3,[[["self"]],[[R[1]],[R[3],[R[1]]]]]],[11,"new",E,"Create a new `Waker`.",4,[[[R[6]],[R[1]]],[[R[3],["waker"]],["waker"]]]],[11,"wake",E,"Wake up the [`Poll`] associated with this `Waker`.",4,[[["self"]],[R[3]]]],[0,"event",E,"Readiness event types and utilities.",N,N],[3,"Event",R[10],"A readiness event.",N,N],[3,R[4],E,R[5],N,N],[3,"Iter",E,"[`Events`] iterator.",N,N],[11,R[6],E,"Returns the event's token.",5,[[["self"]],[R[6]]]],[11,R[7],E,"Returns true if the event contains readable readiness.",5,[[["self"]],["bool"]]],[11,R[8],E,"Returns true if the event contains writable readiness.",5,[[["self"]],["bool"]]],[11,"is_error",E,"Returns true if the event contains error readiness.",5,[[["self"]],["bool"]]],[11,"is_hup",E,"Returns true if the event contains HUP readiness.",5,[[["self"]],["bool"]]],[11,"is_read_hup",E,"Returns true if the event contains read HUP readiness.",5,[[["self"]],["bool"]]],[11,"is_priority",E,"Returns true if the event contains priority readiness.",5,[[["self"]],["bool"]]],[11,R[9],E,"Returns true if the event contains AIO readiness.",5,[[["self"]],["bool"]]],[11,"is_lio",E,"Returns true if the event contains LIO readiness.",5,[[["self"]],["bool"]]],[11,"with_capacity","mio","Return a new `Events` capable of holding up to `capacity`…",6,[[["usize"]],["events"]]],[11,"capacity",E,"Returns the number of `Event` values that `self` can hold.",6,[[["self"]],["usize"]]],[11,"is_empty",E,"Returns `true` if `self` contains no `Event` values.",6,[[["self"]],["bool"]]],[11,"iter",E,"Returns an iterator over the `Event` values.",6,[[["self"]],["iter"]]],[11,"clear",E,"Clearing all `Event` values from container explicitly.",6,[[["self"]]]],[8,"Source",R[10],"An event source that may be registered with [`Registry`].",N,N],[10,R[11],E,"Register `self` with the given `Registry` instance.",7,[[["self"],[R[0]],[R[6]],[R[1]]],[R[3]]]],[10,R[12],E,"Re-register `self` with the given `Registry` instance.",7,[[["self"],[R[0]],[R[6]],[R[1]]],[R[3]]]],[10,R[13],E,"Deregister `self` from the given `Registry` instance.",7,[[["self"],[R[1]]],[R[3]]]],[0,"net","mio","Networking primitives",N,N],[3,R[50],R[40],"A structure representing a socket server",N,N],[3,R[49],E,"A non-blocking TCP stream between a local socket and a…",N,N],[3,R[51],E,"A User Datagram Protocol socket.",N,N],[11,"connect",E,"Create a new TCP stream and issue a non-blocking connect…",8,[[[R[15]]],[[R[3],[R[14]]],[R[14]]]]],[11,"peer_addr",E,"Returns the socket address of the remote peer of this TCP…",8,[[["self"]],[[R[15]],[R[3],[R[15]]]]]],[11,R[19],E,"Returns the socket address of the local half of this TCP…",8,[[["self"]],[[R[15]],[R[3],[R[15]]]]]],[11,R[16],E,R[20],8,[[["self"]],[[R[3],[R[14]]],[R[14]]]]],[11,R[17],E,"Shuts down the read, write, or both halves of this…",8,[[["self"],[R[17]]],[R[3]]]],[11,"set_nodelay",E,"Sets the value of the `TCP_NODELAY` option on this socket.",8,[[["self"],["bool"]],[R[3]]]],[11,"nodelay",E,"Gets the value of the `TCP_NODELAY` option on this socket.",8,[[["self"]],[[R[3],["bool"]],["bool"]]]],[11,R[28],E,R[21],8,[[["self"],["u32"]],[R[3]]]],[11,"ttl",E,R[22],8,[[["self"]],[["u32"],[R[3],["u32"]]]]],[11,R[23],E,R[24],8,[[["self"]],[[R[25],["error"]],[R[3],[R[25]]]]]],[11,"peek",E,"Receives data on the socket from the remote address to…",8,[[["self"]],[["usize"],[R[3],["usize"]]]]],[11,"bind",E,"Convenience method to bind a new TCP listener to the…",9,[[[R[15]]],[[R[18]],[R[3],[R[18]]]]]],[11,"accept",E,"Accepts a new `TcpStream`.",9,[[["self"]],[R[3]]]],[11,R[19],E,"Returns the local socket address of this listener.",9,[[["self"]],[[R[15]],[R[3],[R[15]]]]]],[11,R[16],E,R[20],9,[[["self"]],[[R[18]],[R[3],[R[18]]]]]],[11,R[28],E,R[21],9,[[["self"],["u32"]],[R[3]]]],[11,"ttl",E,R[22],9,[[["self"]],[["u32"],[R[3],["u32"]]]]],[11,R[23],E,R[24],9,[[["self"]],[[R[25],["error"]],[R[3],[R[25]]]]]],[11,"bind",E,"Creates a UDP socket from the given address.",10,[[[R[15]]],[[R[26]],[R[3],[R[26]]]]]],[11,R[19],E,"Returns the socket address that this socket was created…",10,[[["self"]],[[R[15]],[R[3],[R[15]]]]]],[11,R[16],E,R[20],10,[[["self"]],[[R[26]],[R[3],[R[26]]]]]],[11,"send_to",E,"Sends data on the socket to the given address. On success,…",10,[[["self"],[R[15]]],[["usize"],[R[3],["usize"]]]]],[11,"recv_from",E,"Receives data from the socket. On success, returns the…",10,[[["self"]],[R[3]]]],[11,"peek_from",E,R[27],10,[[["self"]],[R[3]]]],[11,"send",E,"Sends data on the socket to the address previously bound…",10,[[["self"]],[["usize"],[R[3],["usize"]]]]],[11,"recv",E,"Receives data from the socket previously bound with…",10,[[["self"]],[["usize"],[R[3],["usize"]]]]],[11,"peek",E,R[27],10,[[["self"]],[["usize"],[R[3],["usize"]]]]],[11,"connect",E,"Connects the UDP socket setting the default destination…",10,[[["self"],[R[15]]],[R[3]]]],[11,"set_broadcast",E,"Sets the value of the `SO_BROADCAST` option for this socket.",10,[[["self"],["bool"]],[R[3]]]],[11,"broadcast",E,"Gets the value of the `SO_BROADCAST` option for this socket.",10,[[["self"]],[[R[3],["bool"]],["bool"]]]],[11,"set_multicast_loop_v4",E,"Sets the value of the `IP_MULTICAST_LOOP` option for this…",10,[[["self"],["bool"]],[R[3]]]],[11,"multicast_loop_v4",E,"Gets the value of the `IP_MULTICAST_LOOP` option for this…",10,[[["self"]],[[R[3],["bool"]],["bool"]]]],[11,"set_multicast_ttl_v4",E,"Sets the value of the `IP_MULTICAST_TTL` option for this…",10,[[["self"],["u32"]],[R[3]]]],[11,"multicast_ttl_v4",E,"Gets the value of the `IP_MULTICAST_TTL` option for this…",10,[[["self"]],[["u32"],[R[3],["u32"]]]]],[11,"set_multicast_loop_v6",E,"Sets the value of the `IPV6_MULTICAST_LOOP` option for…",10,[[["self"],["bool"]],[R[3]]]],[11,"multicast_loop_v6",E,"Gets the value of the `IPV6_MULTICAST_LOOP` option for…",10,[[["self"]],[[R[3],["bool"]],["bool"]]]],[11,R[28],E,R[21],10,[[["self"],["u32"]],[R[3]]]],[11,"ttl",E,R[22],10,[[["self"]],[["u32"],[R[3],["u32"]]]]],[11,"join_multicast_v4",E,"Executes an operation of the `IP_ADD_MEMBERSHIP` type.",10,[[["self"],[R[29]]],[R[3]]]],[11,"join_multicast_v6",E,"Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",10,[[["self"],[R[30]],["u32"]],[R[3]]]],[11,"leave_multicast_v4",E,"Executes an operation of the `IP_DROP_MEMBERSHIP` type.",10,[[["self"],[R[29]]],[R[3]]]],[11,"leave_multicast_v6",E,"Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",10,[[["self"],[R[30]],["u32"]],[R[3]]]],[11,R[23],E,R[24],10,[[["self"]],[[R[25],["error"]],[R[3],[R[25]]]]]],[0,"unix","mio","Unix only extensions.",N,N],[3,R[52],R[39],"Adapter for [`RawFd`] providing an [`event::Source`]…",N,N],[12,"0",E,E,11,N],[11,"from","mio",E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[31],E,E,6,[[[U]],[R[3]]]],[11,R[32],E,E,6,[[],[R[3]]]],[11,R[37],E,E,6,[[["self"]],[T]]],[11,R[33],E,E,6,[[["self"]],[T]]],[11,R[34],E,E,6,[[["self"]],[R[38]]]],[11,R[35],E,E,1,[[["self"]],[T]]],[11,R[36],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[31],E,E,1,[[[U]],[R[3]]]],[11,R[32],E,E,1,[[],[R[3]]]],[11,R[37],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[["self"]],[T]]],[11,R[34],E,E,1,[[["self"]],[R[38]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[31],E,E,2,[[[U]],[R[3]]]],[11,R[32],E,E,2,[[],[R[3]]]],[11,R[37],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,[[["self"]],[T]]],[11,R[34],E,E,2,[[["self"]],[R[38]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[31],E,E,3,[[[U]],[R[3]]]],[11,R[32],E,E,3,[[],[R[3]]]],[11,R[37],E,E,3,[[["self"]],[T]]],[11,R[33],E,E,3,[[["self"]],[T]]],[11,R[34],E,E,3,[[["self"]],[R[38]]]],[11,R[35],E,E,0,[[["self"]],[T]]],[11,R[36],E,E,0,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[31],E,E,0,[[[U]],[R[3]]]],[11,R[32],E,E,0,[[],[R[3]]]],[11,R[37],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,[[["self"]],[T]]],[11,R[34],E,E,0,[[["self"]],[R[38]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[31],E,E,4,[[[U]],[R[3]]]],[11,R[32],E,E,4,[[],[R[3]]]],[11,R[37],E,E,4,[[["self"]],[T]]],[11,R[33],E,E,4,[[["self"]],[T]]],[11,R[34],E,E,4,[[["self"]],[R[38]]]],[11,"from",R[39],E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[31],E,E,11,[[[U]],[R[3]]]],[11,R[32],E,E,11,[[],[R[3]]]],[11,R[37],E,E,11,[[["self"]],[T]]],[11,R[33],E,E,11,[[["self"]],[T]]],[11,R[34],E,E,11,[[["self"]],[R[38]]]],[11,"from",R[10],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[31],E,E,5,[[[U]],[R[3]]]],[11,R[32],E,E,5,[[],[R[3]]]],[11,R[37],E,E,5,[[["self"]],[T]]],[11,R[33],E,E,5,[[["self"]],[T]]],[11,R[34],E,E,5,[[["self"]],[R[38]]]],[11,"into_iter",E,E,12,[[],["i"]]],[11,R[35],E,E,12,[[["self"]],[T]]],[11,R[36],E,E,12,[[["self"],[T]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[31],E,E,12,[[[U]],[R[3]]]],[11,R[32],E,E,12,[[],[R[3]]]],[11,R[37],E,E,12,[[["self"]],[T]]],[11,R[33],E,E,12,[[["self"]],[T]]],[11,R[34],E,E,12,[[["self"]],[R[38]]]],[11,"from",R[40],E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[31],E,E,9,[[[U]],[R[3]]]],[11,R[32],E,E,9,[[],[R[3]]]],[11,R[37],E,E,9,[[["self"]],[T]]],[11,R[33],E,E,9,[[["self"]],[T]]],[11,R[34],E,E,9,[[["self"]],[R[38]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[31],E,E,8,[[[U]],[R[3]]]],[11,R[32],E,E,8,[[],[R[3]]]],[11,R[37],E,E,8,[[["self"]],[T]]],[11,R[33],E,E,8,[[["self"]],[T]]],[11,R[34],E,E,8,[[["self"]],[R[38]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[31],E,E,10,[[[U]],[R[3]]]],[11,R[32],E,E,10,[[],[R[3]]]],[11,R[37],E,E,10,[[["self"]],[T]]],[11,R[33],E,E,10,[[["self"]],[T]]],[11,R[34],E,E,10,[[["self"]],[R[38]]]],[11,R[11],R[39],E,11,[[["self"],[R[0]],[R[6]],[R[1]]],[R[3]]]],[11,R[12],E,E,11,[[["self"],[R[0]],[R[6]],[R[1]]],[R[3]]]],[11,R[13],E,E,11,[[["self"],[R[1]]],[R[3]]]],[11,R[11],R[40],E,8,[[["self"],[R[0]],[R[6]],[R[1]]],[R[3]]]],[11,R[12],E,E,8,[[["self"],[R[0]],[R[6]],[R[1]]],[R[3]]]],[11,R[13],E,E,8,[[["self"],[R[1]]],[R[3]]]],[11,R[11],E,E,9,[[["self"],[R[0]],[R[6]],[R[1]]],[R[3]]]],[11,R[12],E,E,9,[[["self"],[R[0]],[R[6]],[R[1]]],[R[3]]]],[11,R[13],E,E,9,[[["self"],[R[1]]],[R[3]]]],[11,R[11],E,E,10,[[["self"],[R[0]],[R[6]],[R[1]]],[R[3]]]],[11,R[12],E,E,10,[[["self"],[R[0]],[R[6]],[R[1]]],[R[3]]]],[11,R[13],E,E,10,[[["self"],[R[1]]],[R[3]]]],[11,"clone","mio",E,1,[[["self"]],[R[0]]]],[11,"clone",E,E,0,[[["self"]],[R[6]]]],[11,"clone",R[10],E,12,[[["self"]],["iter"]]],[11,R[42],"mio",E,1,[[["self"],[R[0]]],[[R[25],[R[41]]],[R[41]]]]],[11,"lt",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"le",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"gt",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"ge",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,R[42],E,E,0,[[["self"],[R[6]]],[[R[25],[R[41]]],[R[41]]]]],[11,"lt",E,E,0,[[["self"],[R[6]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[6]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[6]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[6]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[6]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[6]]],["bool"]]],[11,"from",E,E,0,[[["usize"]],[R[6]]]],[11,"next",R[10],E,12,[[["self"]],[R[25]]]],[11,"cmp","mio",E,1,[[["self"],[R[0]]],[R[41]]]],[11,"cmp",E,E,0,[[["self"],[R[6]]],[R[41]]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"fmt",E,E,1,[[["self"],[R[43]]],[R[3]]]],[11,"fmt",E,E,2,[[["self"],[R[43]]],[R[3]]]],[11,"fmt",E,E,3,[[["self"],[R[43]]],[R[3]]]],[11,"fmt",R[39],E,11,[[["self"],[R[43]]],[R[3]]]],[11,"fmt","mio",E,0,[[["self"],[R[43]]],[R[3]]]],[11,"fmt",E,E,4,[[["self"],[R[43]]],[R[3]]]],[11,"fmt",R[10],E,5,[[["self"],[R[43]]],[R[3]]]],[11,"fmt",E,E,12,[[["self"],[R[43]]],[R[3]]]],[11,"fmt","mio",E,6,[[["self"],[R[43]]],[R[3]]]],[11,"fmt",R[40],E,8,[[["self"],[R[43]]],[R[3]]]],[11,"fmt",E,E,9,[[["self"],[R[43]]],[R[3]]]],[11,"fmt",E,E,10,[[["self"],[R[43]]],[R[3]]]],[11,"bitor","mio",E,1,[[],["self"]]],[11,"bitor_assign",E,E,1,[[["self"]]]],[11,R[44],E,E,2,[[["self"]],["rawfd"]]],[11,R[44],R[40],E,8,[[["self"]],["rawfd"]]],[11,R[44],E,E,9,[[["self"]],["rawfd"]]],[11,R[44],E,E,10,[[["self"]],["rawfd"]]],[11,"read",E,E,8,[[["self"]],[["usize"],[R[3],["usize"]]]]],[11,"read_vectored",E,E,8,[[["self"]],[["usize"],[R[3],["usize"]]]]],[11,"write",E,E,8,[[["self"]],[["usize"],[R[3],["usize"]]]]],[11,"write_vectored",E,E,8,[[["self"]],[["usize"],[R[3],["usize"]]]]],[11,"flush",E,E,8,[[["self"]],[R[3]]]],[11,R[45],E,E,8,[[],["rawfd"]]],[11,R[45],E,E,9,[[],["rawfd"]]],[11,R[45],E,E,10,[[],["rawfd"]]],[11,R[46],E,E,8,[[["rawfd"]],[R[14]]]],[11,R[46],E,E,9,[[["rawfd"]],[R[18]]]],[11,R[46],E,E,10,[[["rawfd"]],[R[26]]]]],"p":[[3,"Token"],[3,R[47]],[3,"Poll"],[3,R[48]],[3,"Waker"],[3,"Event"],[3,R[4]],[8,"Source"],[3,R[49]],[3,R[50]],[3,R[51]],[3,R[52]],[3,"Iter"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);